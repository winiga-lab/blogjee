<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html">
    <h:head>
        <title>Facelet Title</title>
        <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet"/>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.6.0/styles/stackoverflow-dark.min.css" integrity="sha512-9F4w40pQJloG92QgszKGVFODKAkZ70xtcDe2IPcVELXMmkxkojfL6jcP6XSf1NTf4yVc3K0T9h/0gPp8bVIn6w==" crossorigin="anonymous" />
    </h:head>
    <h:body>
        <div id="standalone-container">
            <div id="toolbar-container">
                <span class="ql-formats">
          <select class="ql-font"></select>
          <select class="ql-size"></select>
        </span>
        <span class="ql-formats">
          <button class="ql-bold"></button>
          <button class="ql-italic"></button>
          <button class="ql-underline"></button>
          <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
          <select class="ql-color"></select>
          <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
          <button class="ql-script" value="sub"></button>
          <button class="ql-script" value="super"></button>
        </span>
        <span class="ql-formats">
          <button class="ql-header" value="1"></button>
          <button class="ql-header" value="2"></button>
          <button class="ql-blockquote"></button>
          <button class="ql-code-block"></button>
        </span>
        <span class="ql-formats">
          <button class="ql-list" value="ordered"></button>
          <button class="ql-list" value="bullet"></button>
          <button class="ql-indent" value="-1"></button>
          <button class="ql-indent" value="+1"></button>
        </span>
        <span class="ql-formats">
          <button class="ql-direction" value="rtl"></button>
          <select class="ql-align"></select>
        </span>
        <span class="ql-formats">
          <button class="ql-link"></button>
          <button class="ql-image"></button>
          <button class="ql-video"></button>
          <button class="ql-formula"></button>
        </span>
        <span class="ql-formats">
          <button class="ql-clean"></button>
        </span>
                <button id="custom-button"></button>
            </div>
            <div id="editor-container"></div>
        </div>
        
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.6.0/highlight.min.js" integrity="sha512-zol3kFQ5tnYhL7PzGt0LnllHHVWRGt2bTCIywDiScVvLIlaDOVJ6sPdJTVi0m3rA660RT+yZxkkRzMbb1L8Zkw==" crossorigin="anonymous"></script>
        <!-- Include the Quill library -->
        <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

        <!-- Initialize Quill editor -->
        <script>
        //<![CDATA[
            //Quill.register('modules/blotFormatter', QuillBlotFormatter.default);
            const editor = new Quill('#editor-container', {
                 modules: {
                   toolbar: '#toolbar-container',
                   syntax : true
                 },
                 placeholder: 'Free Write...',
                 theme: 'snow'
               });
               editor.keyboard.addBinding({ key: 's', shortKey: true }, function(range, context) {
                   
                    if(confirm("do you want to save changes")) {
                        
                        const getToken = new XMLHttpRequest();
                        getToken.open('GET', '/jeeblog-1.0-SNAPSHOT/JWTProvider' , true);
                        getToken.overrideMimeType("text/plain");
                        
                        getToken.onload = () => {
                            
                            if (getToken.status === 200) {
                                
                                console.log(getToken.responseText);
                                const xhr = new XMLHttpRequest();
                                const pd = {};
                                xhr.open('POST', '/jeeblog-1.0-SNAPSHOT/api/post' , true);
                                xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                                xhr.setRequestHeader('Authorization', 'Bearer ' + getToken.responseText);
                                xhr.onload = () => {
                                    if (xhr.status === 200) {
                                      console.log(xhr.responseText);
                                    }
                                };
                                pd.details = JSON.stringify(editor.getContents());
                                xhr.send(JSON.stringify(pd));
                            }
                        };
                        
                        getToken.send();
                        
                    }
                    
                   return true;
               });

                 /**
                  * Step1. select local image
                  *
                  */
               function selectLocalImage() {
                 const input = document.createElement('input');
                 input.setAttribute('type', 'file');
                 input.click();

                 // Listen upload local image and save to server
                 input.onchange = () => {
                   const file = input.files[0];

                   // file type is only image.
                   if (/^image\//.test(file.type)) {
                     saveToServer(file);
                   } else {
                     console.warn('You could only upload images.');
                   }
                 };
               }

                  /**
                   * Step2. save to server
                   *
                   * @param {File} file
                   */
                  function saveToServer(file) {
                    let preset = 'blogjava';
                    var IMGUR_API_URL = 'https://api.cloudinary.com/v1_1/gwiniga/upload';
                    
                    const fd = new FormData();

                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', IMGUR_API_URL, true);
                    //xhr.setRequestHeader('Authorization', 'Client-ID ' + IMGUR_CLIENT_ID);
                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                    
                    xhr.onload = () => {
                      if (xhr.status === 200) {
                        // this is callback data: url
                        const url = JSON.parse(xhr.responseText).url;
                        console.log(url);
                        insertToEditor(url);
                      }
                    };
                    
                    fd.append('upload_preset',preset);
                    fd.append('file', file);
                    xhr.send(fd);
                  }

                  /**
                   * Step3. insert image url to rich editor.
                   *
                   * @param {string} url
                   */
                  function insertToEditor(url) {
                    // push image url to rich editor.
                    const range = editor.getSelection();
                    editor.insertEmbed(range.index, 'image', url);
                  }

                  // quill editor add image handler
                  editor.getModule('toolbar').addHandler('image', () => {
                    selectLocalImage();
                  });
                  
                  document.addEventListener("keydown", function(e) {
                    if (e.keyCode == 83 && (navigator.platform.match("Mac") ? e.metaKey : e.ctrlKey)) {
                      e.preventDefault();
                    }
                  }, false);
                  
                  window.addEventListener("beforeunload", function (e) {
                        var confirmationMessage = 'It looks like you have been editing something. '
                                                + 'If you leave before saving, your changes will be lost.';

                        (e || window.event).returnValue = confirmationMessage; //Gecko + IE
                        return confirmationMessage; //Gecko + Webkit, Safari, Chrome etc.
                    });
            //]]>
        </script>
    </h:body>
</html>

