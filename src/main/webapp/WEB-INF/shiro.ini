[main]


# password matcher
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

passwordService = com.eii.jeeclassproject.jeeblog.security.BCryptPasswordService
passwordMatcher.passwordService = $passwordService

#datasource type
ds = org.apache.shiro.jndi.JndiObjectFactory

#datasourcename
ds.resourceName = java:/testMysql 

#datasourcetype
ds.requiredType = javax.sql.DataSource


#configuring jdbc realm
#jdbcRealm = com.eii.jeeclassproject.jeeblog.security.CustomJDBCRealm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource=$ds
jdbcRealm.authenticationQuery= select password from user where email = ?
jdbcRealm.permissionsLookupEnabled=false
securityManager.realms = $jdbcRealm
#login url
authc.loginUrl = /login.xhtml

#page to redirected to after logout
logout.redirectUrl = /

#page to where to land after login
authc.successUrl = /

#username parameter name in the loginform
authc.usernameParam = username

#password parameter name in the loginform
authc.passwordParam = password

#rememberme parameter name in the loginform
authc.rememberMeParam=rememberme

#cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
#securityManager.cacheManager = $cacheManager
#jdbcRealm.authenticationCachingEnabled = true

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.

/user = authc
/login = anon